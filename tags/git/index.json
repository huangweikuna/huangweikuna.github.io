[{"content":"初始化代码库 1 2 3 4 5 6  # 在当前目录新建一个Git代码库 git init # 新建一个目录，将其初始化为Git代码库 git init [project-name] # 下载一个项目和它的整个代码历史 git clone [url]   配置全局信息 1 2 3 4 5 6 7  # 显示当前的Git配置 git config --list # 编辑Git配置文件 git config -e [--global] # 设置提交代码时的用户信息 git config [--global] user.name \u0026#34;[name]\u0026#34; git config [--global] user.email \u0026#34;[email address]\u0026#34;   代码提交 1 2 3 4 5 6 7 8 9 10 11 12 13 14  # 添加当前目录的所有文件到暂存区 git add . # 提交暂存区到仓库区 git commit -m [message] # 提交暂存区的指定文件到仓库区 git commit [file1] [file2] ... -m [message] # 提交工作区自上次commit之后的变化，直接到仓库区 git commit -a # 提交时显示所有diff信息 git commit -v # 使用一次新的commit，替代上一次提交，如果代码没有任何新变化，则用来改写上一次commit的提交信息 git commit --amend -m [message] # 重做上一次commit，并包括指定文件的新变化 git commit --amend [file1] [file2] ...   分支操作 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  # 列出所有本地分支 git branch # 列出所有远程分支 git branch -r # 列出所有本地分支和远程分支 git branch -a # 新建一个分支，但依然停留在当前分支 git branch [branch-name] # 新建一个分支，并切换到该分支 git checkout -b [branch] # 新建一个分支，指向指定commit git branch [branch] [commit] # 新建一个分支，与指定的远程分支建立追踪关系 git branch --track [branch] [remote-branch] # 切换到指定分支，并更新工作区 git checkout [branch-name] # 切换到上一个分支 git checkout - # 建立追踪关系，在现有分支与指定的远程分支之间 git branch --set-upstream [branch] [remote-branch] # 合并指定分支到当前分支 git merge [branch] # 选择一个commit，合并进当前分支 git cherry-pick [commit] # 删除分支 git branch -d [branch-name] # 删除远程分支 git push origin --delete [branch-name] git branch -dr [remote/branch]   远端仓库 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  # 下载远程仓库的所有变动 git fetch [remote] # 显示所有远程仓库 git remote -v # 显示某个远程仓库的信息 git remote show [remote] # 增加一个新的远程仓库，并命名 git remote add [shortname] [url] # 取回远程仓库的变化，并与本地分支合并 git pull [remote] [branch] # 上传本地指定分支到远程仓库 git push [remote] [branch] # 强行推送当前分支到远程仓库，即使有冲突 git push [remote] --force # 推送所有分支到远程仓库 git push [remote] --all   操作集合 master* : 本地分支（* 代表当前代码所在分支）\norigin/master : 你的git仓库里的分支\nupstream/master : Fork 项目的源地址  跟随Fork项目 1 2 3 4 5 6 7 8 9 10 11 12 13 14  #添加 upstream/master 分支地址，如果没有到话 git remote add upstream [url] #拉取 upstream/master 分支代码 git fetch upstream #切换到 upstream/master 分支 git checkout upstream/master # 创建一个新分支（这支分支只负责同步 upstream/master 的代码） git branch -b tmp #把新建分支和 upstream/master 分支关联 git branch --set-upstream-to=upstream/master   做完以上操作之后，本地就有一份 upstream/master 分支的代码了。现在就可以通过合并分支的一些操作去同步代码了。由于我们还关联了 upstream/master 的分支地址，所以每次只要切换到 tmp 分支进行 pull 即可获取到最新代码。\nsubmodule 在初始化含有submodule项目时，需要手动更新submodule代码。\n1 2 3 4  git submodule init \u0026amp;\u0026amp; git submodule update #如果直接 clone 目标项目时可以直接带上 --recursive git clone https://xxx.git --recursive   如果一个项目中包含多个submodule，则需要进入每个文件夹中进行代码拉取。但是git提供了一种更简便的方法。\n1 2  # git submodule \u0026lt;command\u0026gt; 可以遍历所有的submodule，并执行相应的命令 git submodule foreach git checkout master   参考 常用 Git 命令清单\n关于 git-submodule 的一些基本操作\n","description":"git 常用命令和操作","id":0,"section":"posts","tags":["git"],"title":"git 操作命令","uri":"/posts/git%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/"},{"content":"CentOS  运行环境 安装 1 2  # 安装go yum -y install golang   添加epel repo vim /etc/yum.repos.d/hugo.repo\n1 2 3 4 5 6 7 8 9  [daftaupe-hugo] name=Copr repo for hugo owned by daftaupe baseurl=https://copr-be.cloud.fedoraproject.org/results/daftaupe/hugo/epel-7-$basearch/ type=rpm-md skip_if_unavailable=True gpgcheck=1 gpgkey=https://copr-be.cloud.fedoraproject.org/results/daftaupe/hugo/pubkey.gpg repo_gpgcheck=0 enabled=1   1 2 3 4  # init hugo serve # 发布新文章 # hugo serve -e production --disableFastRender # 生产环境, enables full re-renders on changes   常用参数介绍 1 2 3 4 5 6 7 8 9 10 11  --bind=\u0026#34;127.0.0.1\u0026#34; #服务监听IP地址； -p, --port=1313 #服务监听端口； -w, --watch[=true] #监听站点目录，发现文件变更自动编译； -D, --buildDrafts #包括被标记为draft的文章； -E, --buildExpired #包括已过期的文章； -F, --buildFuture #包括将在未来发布的文章； -b, --baseURL=\u0026#34;www.datals.com\u0026#34; #服务监听域名； --log[=false]: #开启日志； --logFile=\u0026#34;/var/log/hugo.log\u0026#34;: #log输出路径； -t, --theme=\u0026#34;\u0026#34; #指定主题； -v, --verbose[=false]: #输出详细信息   常用使用参数组合 1  hugo server -t hyde --buildDrafts --baseURL=http://www.xxx.com --bind=0.0.0.0 --port=80 -w   发布 执行hugo命令，站点目录下会新建文件夹public/，生成的所有静态网站页面都会存储到这个目录。\n 如果使用Github pages来作为博客的Host，你只需要将public/里的文件上传就可以。 如果使用nginx作为web服务配置root dir 指向public/ 即可。  参考 Hugo 常用命令详解\n","description":"Hugo博客搭建记录。","id":1,"section":"posts","tags":["hugo"],"title":"Blog搭建笔记","uri":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/"},{"content":"文章图片引用图来自 Pixabay\n","description":"Photo of this blog","id":2,"section":"gallery","tags":null,"title":"Photo","uri":"/gallery/photo/"},{"content":"你好哇，我现在在上海。\n","description":"","id":3,"section":"","tags":null,"title":"关于我","uri":"/about/"},{"content":"#\u0026mdash;\n#title: \u0026ldquo;Hugo zDoc Theme\u0026rdquo;\n#date: 2020-01-19T21:13:42+09:00\n#description: Make a documentation with hugo zdoc theme!\n#weight: 1\n#link: https://github.com/zzossig/hugo-theme-zdoc\n#repo: https://github.com/zzossig/hugo-theme-zdoc\n#pinned: true\n#thumb: feature3/css3-bare.png\n#\u0026mdash;\n","description":"","id":4,"section":"showcase","tags":null,"title":"","uri":"/showcase/hugo/hugo-theme-zdoc/"},{"content":"#\u0026mdash;\n#title: \u0026ldquo;Hugo Zzo Theme\u0026rdquo;\n#date: 2020-01-19T21:13:42+09:00\n#description: Make a blog with hugo zzo theme!\n#weight: 2\n#link: https://github.com/zzossig/hugo-theme-zzo\n#repo: https://github.com/zzossig/hugo-theme-zzo\n#pinned: true\n#thumb: feature3/css3.png\n#\u0026mdash;\n","description":"","id":5,"section":"showcase","tags":null,"title":"","uri":"/showcase/hugo/hugo-theme-zzo/"}]